package org.techytax.ws;

/**
 * Please modify this class to meet your needs
 * This class is not complete
 */

import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.net.MalformedURLException;
import java.net.URL;
import java.security.GeneralSecurityException;
import java.security.KeyStore;
import java.security.KeyStoreException;
import java.security.NoSuchAlgorithmException;
import java.util.HashMap;
import java.util.Map;

import javax.net.ssl.KeyManager;
import javax.net.ssl.KeyManagerFactory;
import javax.net.ssl.TrustManager;
import javax.net.ssl.TrustManagerFactory;
import javax.xml.namespace.QName;
import javax.xml.ws.soap.SOAPFaultException;

import org.apache.cxf.configuration.jsse.TLSClientParameters;
import org.apache.cxf.frontend.ClientProxy;
import org.apache.cxf.interceptor.LoggingInInterceptor;
import org.apache.cxf.interceptor.LoggingOutInterceptor;
import org.apache.cxf.transport.http.HTTPConduit;
import org.apache.cxf.ws.security.wss4j.WSS4JInInterceptor;
import org.apache.cxf.ws.security.wss4j.WSS4JOutInterceptor;
import org.apache.ws.security.handler.WSHandlerConstants;
import org.techytax.xbrl.DynamicWsaSignaturePartsInterceptor;

/**
 * This class was generated by Apache CXF 2.7.1 2012-12-27T22:36:16.440+01:00
 * Generated source version: 2.7.1
 * 
 */
public final class AanleverServiceV12_AanleverServiceV12_Client {

	private static final QName SERVICE_NAME = new QName(
			"http://logius.nl/digipoort/wus/2.0/aanleverservice/1.2/",
			"AanleverService_V1_2");

	private AanleverServiceV12_AanleverServiceV12_Client() {
	}

	public static void main(String args[]) throws java.lang.Exception {
		URL wsdlURL = AanleverServiceV12_Service.WSDL_LOCATION;
		if (args.length > 0 && args[0] != null && !"".equals(args[0])) {
			File wsdlFile = new File(args[0]);
			try {
				if (wsdlFile.exists()) {
					wsdlURL = wsdlFile.toURI().toURL();
				} else {
					wsdlURL = new URL(args[0]);
				}
			} catch (MalformedURLException e) {
				e.printStackTrace();
			}
		}

		AanleverServiceV12_Service ss = new AanleverServiceV12_Service(wsdlURL,
				SERVICE_NAME);
		AanleverServiceV12 port = ss.getAanleverServiceV12();

		setupTLS(port);

		org.apache.cxf.endpoint.Client client = ClientProxy.getClient(port);
		org.apache.cxf.endpoint.Endpoint cxfEndpoint = client.getEndpoint();

		cxfEndpoint.getInInterceptors().add(new LoggingInInterceptor());
		cxfEndpoint.getOutInterceptors().add(new LoggingOutInterceptor());

		Map<String, Object> outProps = new HashMap<String, Object>();
		// how to configure the properties is outlined below;

		outProps.put(WSHandlerConstants.USER,
				WSHandlerConstants.USE_REQ_SIG_CERT);
		outProps.put(WSHandlerConstants.SIG_KEY_ID, "DirectReference");
		outProps.put(WSHandlerConstants.SIGNATURE_USER, "1");
		outProps.put(WSHandlerConstants.PW_CALLBACK_CLASS,
				ClientPasswordCallback.class.getName());
		outProps.put(
				WSHandlerConstants.SIGNATURE_PARTS,
				"{Content}{http://schemas.xmlsoap.org/soap/envelope/}Body;{Element}{http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd}Timestamp");

		outProps.put(WSHandlerConstants.ACTION, WSHandlerConstants.SIGNATURE);

		outProps.put(WSHandlerConstants.SIG_PROP_FILE, "client_sign.properties");

		Map<String, Object> inProps = new HashMap<String, Object>();
		inProps.put(WSHandlerConstants.ACTION, WSHandlerConstants.TIMESTAMP
				+ " " + WSHandlerConstants.SIGNATURE);
		inProps.put(WSHandlerConstants.SIG_PROP_FILE,
				"client_verify.properties");

		WSS4JInInterceptor wssIn = new WSS4JInInterceptor(inProps);
		cxfEndpoint.getInInterceptors().add(wssIn);

		WSS4JOutInterceptor wssOut = new WSS4JOutInterceptor(outProps);
		cxfEndpoint.getOutInterceptors().add(wssOut);
		cxfEndpoint.getOutInterceptors().add(
				new DynamicWsaSignaturePartsInterceptor());

		{
			System.out.println("Invoking aanleveren...");
			org.techytax.ws.AanleverRequest aanleverRequest = null;
			try {
				aanleverRequest = new AanleverRequest();
				aanleverRequest.setAutorisatieAdres("http://geenausp.nl");
				aanleverRequest.setBerichtsoort("Omzetbelasting");
				aanleverRequest.setAanleverkenmerk("test");
				IdentiteitType identiteitBelanghebbende = new org.techytax.ws.IdentiteitType();
				identiteitBelanghebbende.setNummer("001000044B93");
				identiteitBelanghebbende.setType("Fi");
				aanleverRequest
						.setIdentiteitBelanghebbende(identiteitBelanghebbende);
				aanleverRequest.setRolBelanghebbende("Bedrijf");
				BerichtInhoudType berichtInhoud = new org.techytax.ws.BerichtInhoudType();
				berichtInhoud.setMimeType("application/xml");
				berichtInhoud.setBestandsnaam("Omzetbelasting.xbrl");
				berichtInhoud.setInhoud(getXbrlFile()
						.replaceAll(">\\s+<", "><").trim().getBytes("UTF-8"));
				aanleverRequest.setBerichtInhoud(berichtInhoud);
				org.techytax.ws.AanleverResponse _aanleveren__return = port
						.aanleveren(aanleverRequest);
				System.out.println("aanleveren.result=" + _aanleveren__return);
				System.out.println("Aangeleverd="
						+ _aanleveren__return.getTijdstempelAangeleverd());
				System.out.println("Statuscode="
						+ _aanleveren__return.getStatuscode());
				System.out.println("Kenmerk="
						+ _aanleveren__return.getKenmerk());					

			} catch (AanleverServiceFault e) {
				System.out
						.println("Expected exception: AanleverServiceFault has occurred.");
				System.out.println("Foutcode: "+e.getFaultInfo().getFoutcode());
				System.out.println("Foutbeschrijving: "+e.getFaultInfo().getFoutbeschrijving());
			} catch (SOAPFaultException sfe) {
				System.out.println("SOAP error: " + sfe.getMessage());
			} catch (Exception e) {
				e.printStackTrace();
			}
		}

		System.exit(0);
	}

	private static String getXbrlFile() throws IOException {
		BufferedReader reader = new BufferedReader(new FileReader(
				"/home/hans/workspace/TechyTax/src/xbrl.xml"));
		String line, results = "";
		while ((line = reader.readLine()) != null) {
			results += line;
		}
		reader.close();
		return results;

	}

	private static void setupTLS(AanleverServiceV12 port)
			throws FileNotFoundException, IOException, GeneralSecurityException {

		HTTPConduit httpConduit = (HTTPConduit) ClientProxy.getClient(port)
				.getConduit();

		TLSClientParameters tlsCP = new TLSClientParameters();
		String keyPassword = "changeit";
		KeyStore keyStore = KeyStore.getInstance("PKCS12");
		String keyStoreLoc = "/home/hans/java/xbrl/wus/cert2/new.p12";
		keyStore.load(new FileInputStream(keyStoreLoc),
				keyPassword.toCharArray());
		KeyManager[] myKeyManagers = getKeyManagers(keyStore, keyPassword);
		tlsCP.setKeyManagers(myKeyManagers);

		KeyStore trustStore = KeyStore.getInstance("JKS");
		keyPassword = "changeit";
		String trustStoreLoc = "/home/hans/java/xbrl/wus/cert/jssecacerts";
		trustStore.load(new FileInputStream(trustStoreLoc),
				keyPassword.toCharArray());
		TrustManager[] myTrustStoreKeyManagers = getTrustManagers(trustStore);
		tlsCP.setTrustManagers(myTrustStoreKeyManagers);

		// The following is not recommended and would not be done in a
		// prodcution environment,
		// this is just for illustrative purpose
		tlsCP.setDisableCNCheck(true);

		httpConduit.setTlsClientParameters(tlsCP);

	}

	private static TrustManager[] getTrustManagers(KeyStore trustStore)
			throws NoSuchAlgorithmException, KeyStoreException {
		String alg = KeyManagerFactory.getDefaultAlgorithm();
		TrustManagerFactory fac = TrustManagerFactory.getInstance(alg);
		fac.init(trustStore);
		return fac.getTrustManagers();
	}

	private static KeyManager[] getKeyManagers(KeyStore keyStore,
			String keyPassword) throws GeneralSecurityException, IOException {
		String alg = KeyManagerFactory.getDefaultAlgorithm();
		char[] keyPass = keyPassword != null ? keyPassword.toCharArray() : null;
		KeyManagerFactory fac = KeyManagerFactory.getInstance(alg);
		fac.init(keyStore, keyPass);
		return fac.getKeyManagers();
	}

}
